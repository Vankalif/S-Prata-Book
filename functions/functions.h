#pragma once
#include <iostream>
#include <fstream>
#include <cstdlib>
#include "my_types.h"

inline double square(double x) { return x * x; }

// Обмен значениями по ссылке
void swapr(int& a, int& b);

// Обмен значениями через указатель
void swapp(int* a, int* b);

// Обмен значениями по значению для наглядности
void swapv(int a, int b);


///////////////////////////////////////////////////
// ==================> l8-5 <================== ///
///////////////////////////////////////////////////

// обычные переменные
double cube(double a);

// ссылочные переменные
double refcube(double& ra);


///////////////////////////////////////////////////
// ==================> l8-6 <================== ///
///////////////////////////////////////////////////

// печать структуры
void display(const FreeThrows& ft);

// задать процент
void set_pc(FreeThrows& ft);

// добавить значение к структуре из другой структуры
FreeThrows& accumulate(FreeThrows& target, const FreeThrows& source);

// клонирование объекта
const FreeThrows& clone(FreeThrows& target);


///////////////////////////////////////////////////
// ==================> l8-7 <================== ///
///////////////////////////////////////////////////


// версия 1 для изменения строки
std::string version1(const std::string& s1, const std::string& s2);

// версия 2 для изменения строки
const std::string& version2(std::string& s1, const std::string& s2);

// версия 3 для изменения строки
const std::string& version3(std::string& s1, const std::string& s2);


///////////////////////////////////////////////////
// ==================> l8-8 <================== ///
///////////////////////////////////////////////////

void file_it(std::ostream& os, double fo, const double fe[], int n);


///////////////////////////////////////////////////
// ==================> l8-9 <================== ///
///////////////////////////////////////////////////

char* left(const char* str, int n = 1);


///////////////////////////////////////////////////
// ==================> l8-10 <================== //
///////////////////////////////////////////////////

// возвращает первых ct цифр из числа num
unsigned long left(unsigned long num, unsigned ct);


///////////////////////////////////////////////////
// ==================> l8-11 <================== //
///////////////////////////////////////////////////
 
// Шаблонная функция
template <typename T> void swap_t(T& a, T& b);

// явное создание экземпляра
template void swap_t<int>(int& a, int& b);
template void swap_t<double>(double& a, double& b);


///////////////////////////////////////////////////
// ==================> l8-12 <================== //
///////////////////////////////////////////////////

// Перегруженный шаблон
template <typename T>
void swap_t(T* a, T* b, int n)
{
	T temp;
	for (size_t i = 0; i < n; i++)
	{
		temp = a[i];
		a[i] = b[i];
		b[i] = temp;
	}
}

// Отобразить массив int
void show(int* arr, int limit);


///////////////////////////////////////////////////
// ==================> l8-13 <================== //
///////////////////////////////////////////////////

// Явная специализация шаблона для типа Job
template <> void swap_t<Job>(Job& a, Job& b);

// Отображение Job
void show(Job& j);